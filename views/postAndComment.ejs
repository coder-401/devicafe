<!DOCTYPE html>
<html lang="en">

  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/style.css" />
    <title>Document</title>
  </head>

  <body>
    <form action=" /signOut" method="POST">
      <input type="submit" value="sign out">
    </form>
    <a href="/profile/<%=userId %>">
      <h3>Profile</h3>
    </a>
    <form id="postForm" action="/post/<%= userId %>" method="POST">
      <textarea name="description" id="description" cols="30" rows="10"></textarea><br />
      <input type="hidden" name="owner" id="owner" value="<%= userId %>">
      <button type="submit">Post</button>
    </form>


    <%let count=0%>
      <%let count2=0%>
        <div class="postAndComment">

          <% for( let i=0; i < posts.length; i++ ) { %>
            <%count++%>
              <div>
                <p><b>The Post : </b>
                  <%=posts[posts.length-1-i].description %> <span><b>
                        <%=posts[posts.length-1-i].time %>
                      </b> </span>
                </p>
                <form action="/post/<%= userId %>/<%= posts[posts.length-1-i]._id %>?_method=delete" method="POST">
                  <button>Delete Post</button>
                </form> <button id="<%=count%>btnPost" class="editPostBtn">Edit Post</button>

                <form class="form" action="/post/<%= userId %>/<%= posts[posts.length-1-i]._id %>?_method=put"
                  method="POST">
                  <textarea name="description"
                    placeholder="<%=posts[posts.length-1-i].description %>"><%=posts[posts.length-1-i].description %></textarea>
                  <button type="submit"> Edit </button>
                </form>

                <% if(comments.length>0) {%>
                  <% comments.forEach(comment=> {%>
                    <% if (comment.post) { %>
                      <% if(comment.post._id.toString()===posts[posts.length-1-i]._id.toString()) {%>
                        <%count2++%>

                          <p><b>Comment : </b>
                            <%=comment.description %> <span><b>
                                  <%= comment.time%>
                                </b> </span>
                          </p>
                          <form action="/comment/<%= userId %>/<%= comment._id.toString()%>?_method=delete"
                            method="POST">
                            <button>Delete Comment</button>
                          </form><button id="<%=count2%>btnComment" class="editCommentBtn">Edit Comment</button>
                          <form class="form" action="/comment/<%= userId %>/<%= comment._id.toString()%>?_method=put"
                            method="POST">
                            <textarea name="description"
                              placeholder="<%=comment.description %>"><%=comment.description %></textarea>
                            <button type="submit"> Edit</button>
                          </form>
                          <% } %>
                            <%} %>
                              <%}) %>
                                <%} %>



                                  <form id="commentForm" action="/comment/<%= userId %>" method="POST">
                                    <textarea name="description" id="description"></textarea><br />
                                    <input type="hidden" name="owner" id="owner" value="<%= userId %>">
                                    <input type="hidden" name="post" id="post"
                                      value="<%= posts[posts.length-1-i]._id %>">
                                    <input type="submit" value="comment">
                                  </form>
              </div>
              <% } %>


        </div>



        <!-- <script>
      const socket = io();
      const postForm = document.querySelector("#postForm");

      const { userId } = Qs.parse(location.search, {
        ignoreQueryPrefix: true,
      });

      postForm.addEventListener("submit", (event) => {
        event.preventDefault();
        const userPost = event.target.post.value;

        socket.emit("post", userPost, userId);
      });

      socket.on("postpublic", (userPostRecord, postowner) => {
        // Create Elements ===========================================================

        const postAndComment = document.querySelector(".postAndComment");
        const postDiv = document.createElement("div");
        postDiv.className = "postDiv";
        const thePost = document.createElement("div");
        thePost.className = "thePost";
        const postP = document.createElement("p");
        const timeP = document.createElement("h3");
        const ownerP = document.createElement("h3");
        const viewCommentsBtn = document.createElement("button");
        const commentsDiv = document.createElement("div");
        const commentForm = document.createElement("form");
        const commentText = document.createElement("textarea");
        const commentButton = document.createElement("button");

        const description = userPostRecord.description;
        const postId = userPostRecord._id;
        const postTime = new Date(parseInt(userPostRecord.time)).toLocaleString();
        const postOwner = postowner;

        // Give Text Content ==========================================================

        postP.textContent = description;
        timeP.textContent = postTime;
        ownerP.textContent = postOwner;
        commentButton.textContent = "Comment";
        commentButton.setAttribute("type", "submit");
        commentForm.setAttribute("id", postId);
        viewCommentsBtn.textContent = "Comments";
        viewCommentsBtn.setAttribute("id", `${postId}btn`);
        commentsDiv.setAttribute("id", `${postId}com`);
        commentsDiv.setAttribute("class", "hideComments");
        commentText.setAttribute("name", "comment");

        // Append Elements ============================================================

        postAndComment.prepend(postDiv);
        postDiv.appendChild(thePost);
        postDiv.appendChild(commentsDiv);
        thePost.appendChild(postP);
        thePost.appendChild(timeP);
        thePost.appendChild(ownerP);
        thePost.appendChild(viewCommentsBtn);
        commentsDiv.appendChild(commentForm);
        commentForm.appendChild(commentText);
        commentForm.appendChild(commentButton);

        // Add Listeners To The Buttons ==================================================
        $(".hideComments").hide();
        $(`#${postId}btn`).on("click", () => {
          $(`#${postId}com`).toggle();
        });

        $(`#${postId}`).on("submit", (eve) => {
          eve.preventDefault();
          const comment = eve.target.comment.value;
          socket.emit("comment", comment, postId, userId);
        });

      });
      socket.on('commentpublic', (userCommentRecord, commentOwner) => {
        $(`#${userCommentRecord.post}com`).prepend(`<p>${userCommentRecord.description}</p><h3>${commentOwner}</h3>`)
        console.log(userCommentRecord.post, commentOwner)
      })
    </script> -->

        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script src="/postAndComment.js"></script>
  </body>

</html>
